stages:
  - build
  - test
  - release
  - deploy

variables:
  IMAGE_NAME: 'guegueitapp'
  IMAGE_TAG: 'v1'
  DOCKER_USERNAME: 'malloumdavid'
 #DOCKER_PASSWORD:
  HOST_PORT: 80
  CONTAINER_PORT: 80
  SERVER_USERNAME: 'ubuntu'

# Build de l'image
Build:
  stage: build
  image: docker:latest
  services:
     - name: docker:dind
       alias: docker
  script:
     - docker build --no-cache -t $IMAGE_NAME:$IMAGE_TAG .
     - docker save -o guegue-it-app.tar $IMAGE_NAME:$IMAGE_TAG
  artifacts:
      paths:
      - guegue-it-app.tar

.test_templates: &test_templates
  stage: test
  before_script:
    - apk add --no-cache curl
  script:
    - docker load -i guegue-it-app.tar
    - docker run --rm -dp $HOST_PORT:$CONTAINER_PORT --name $IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG
    - sleep 5
    - curl -I "http://docker" | grep -i 200

Test:
  stage: test
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  <<: *test_templates

.release_image: &release_image
  stage: release
  script:
   # A utiliser lorsque la variable est disponible sur gitlab
   - echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
   # A utiliser lorsque la variable est dÃ©fini dans le code
   #- docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
   - docker load -i guegue-it-app.tar
   - docker tag $IMAGE_NAME:$IMAGE_TAG $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG
   - docker push $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG

Release Image:
  stage: release
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  <<: *release_image

.deploy_app: &deploy_app
  stage: deploy
  before_script:
    - apk add --no-cache openssh
    - eval $(ssh-agent -s)
    - echo "SSH_PRIVATE_KEY" | base64 -d > /tmp/id_rsa
    - chmod 600 /tmp/id_rsa
    - ssh-add /tmp/id_rsa
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ecgo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa $SERVER_USERNAME@$SERVER_IP "docker pull $DOCKER_USERNAME/$IMAGE_NAME:$IMAGE_TAG"
    - ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa $SERVER_USERNAME@$SERVER_IP "docker run --rm -dp $HOST_PORT:$CONTAINER_PORT --name $IMAGE_NAME $IMAGE_NAME:$IMAGE_TAG"

Deploy review:
  stage: deploy
  variables:
    SERVER_IP: ''
  image: alpine
  <<: *deploy_app
  environment:
    name: Review

Deploy staging:
  stage: deploy
  variables:
    SERVER_IP: ''
  image: alpine
  <<: *deploy_app
  environment:
    name: Staging

Deploy Production:
  stage: deploy
  variables:
    SERVER_IP: ''
  image: alpine
  <<: *deploy_app
  environment:
    name: Production